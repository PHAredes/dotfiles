ls
config nu
$env.config.buffer_editor = "emacsclient"
config nu
clear
Repos/
ls | sort-by | size
ls | sort-by size
clear
ls
ls -la
clear
emacsclient -a ~/.config/wezterm/wezterm.lua
emacsclient ~/.config/wezterm/wezterm.lua
clear
cd .config
..
ls
rm .zshrc
clear
yay -Rcs zsh
fzf
clear
fzf -h
clear
yay -Rcs `#.zshrc.pre-oh-my-zsh#` fzf
yay -Rcs fzf
clear
lazygit
vim .zshrc
config nu
$env.config.buffer_editor = "emacsclient"
uninstall_oh_my_zsh
yay -S zsh
yay -Rcs zsh
config nu
$env.config.buffer_editor = "vim"
config nu
where mise
curl https://mise.run/nu | sh
curl https://mise.run/nushell | sh
^mise activate nu | save -f ($nu.default-config-dir | path join 'vendor/autoload/mise.nu')
mise activate nu | save -f ($nu.default-config-dir | path join 'vendor/autoload/mise.nu')
'<\n>let mise_path = $nu.default-config-dir | path join mise.nu<\n>^mise activate nu | save $mise_path --force<\n>' | save $nu.env-path --append<\n>"\nuse ($nu.default-config-dir | path join mise.nu)" | save $nu.config-path --append
mise update
config nu
$env.config.buffer_editor = "vim"
config nu
mise
open a.lagda.md
config nu
$env.config.buffer_editor = "vim"
config nu
vim .config/nushell/env.nu
config nu
$env.config.buffer_editor = "vim"
config nu
emacs -nw
emacs --daemon
config nu
curl https://mise.run | sh
mise
/home/pedro/.local/bin/mise --help
/home/pedro/.local/bin/mise -E
/home/pedro/.local/bin/mise -E --help
'<\n>let mise_path = $nu.default-config-dir | path join mise.nu<\n>^mise activate nu | save $mise_path --force<\n>' | save $nu.env-path --append<\n>"\nuse ($nu.default-config-dir | path join mise.nu)" | save $nu.config-path --append
config nu
$env.config.buffer_editor = "vim"
vim .config/nushell/mise.nu
"\n$env.NU_LIB_DIRS ++= ($mise_path | path dirname | to nuon)" | save $nu.env-path --append
vim .config/nushell/mise.nu
rm mise.nu
ls
clear
ls .config/nushell
cd nushell/
nushell/
cd .config/nushell/
ls
rm mise.nu
vim config.nu
clear
ls
vim env.nu
cargo install cargo-binstall<\n>cargo binstall mise
par-lang playground
cd Repos/par-lang/
cd ..
where cargo
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
where cargo
which cargo
par-lang playground
$ cargo install --path .<\n>
cargo install --path .
cd par-lang/
cargo install --path .
config nu
clear
cargo install mise
mise --help
mise activate nu | save -f ($nu.default-config-dir | path join 'vendor/autoload/mise.nu')
mise activate
clear
par-lang playground
reboot
which sh
hypr
emacs .bashrc -nw\
hypr
emacs -nw .bashrc
clear
config nu
hypr
holefill
.bashrc
config nu
cat | nu
cat | config nu
where config nu
config nu
ls .config/nushell/ -r
ls .config/nushell/
ls -f .config/nushell/
ls -r .config/nushell/
ls -D .config/nushell/
ls .config/nushell/ | ls .config/nushell/misc/
ls .config/nushell/ .config/nushell/misc/
par-lang playground
reboot
yay
yay --no-confirm
yay
zshrc
vim .zshrc
clear
where zshrc
cleasr
clear
cl
ls
rm `#a.agda#`
cl
ls
ls Repos/
cd Repos/misc/
ls
clear
cd ..
cd
cl
ls
ls PDFs/
ls .ssh
cp .config/nushell/ dotfiles/dotfiles/.config/
git config --global user.email "pedro.aredes@hotmail.com"
git config --global user.name "PHAredes"
clear
ls
clear
vim .emacs
killall emacs
flatpak run com.valvesoftware.Steam
steam
yay -S steam-tui
git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs<\n>~/.config/emacs/bin/doom install
rm .config/.emacs
rm .config/emacs
yay -Syu steam-tui-git
git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.config/emacs<\n>~/.config/emacs/bin/doom install
doom sync
bin/doom sync
doom sync
where doom
which doom
~/.config/emacs/bin/doom doctor
rm .emacs .emacs.d
clear
~/.config/emacs/bin/doom doctor
~/.config/emacs/bin/doom help
~/.config/emacs/bin/doom gc
clear
~/.config/emacs/bin/doom doctor
~/.config/emacs/bin/doom sync
~/.config/emacs/bin/doom gc
yay -Syu steam
cd Downloads/
tar -xf ryzen-controller-2.6.0.tar.gz
cd ryzen-controller-2.6.0/
makepkg -s
ls
yarn i
yarn install
mise use yarn
yarn install
vim .config/wezterm
tar -xf f.tar.gz
ls
cd Universal-x86-Tuning-Utility-2.5.4/
ls
makepkg -s
ls
cd Universal-x86-Tuning-Utility-2.5.4/
emacs README.md
ls
ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
yay
yay -S ryzenadj
yay -Syu
ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
sudo ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
vim dotfiles/dotfiles/.config/hypr/user-config.conf
vim .config/hypr/config/keybinds.conf
sudo ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
cl
sudo ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
ls
sudo bb_fix.sh
sudo ./bb_fix.sh up
chmod +x bb_fix.sh
sudo ./bb_fix.sh up
sudo wondershaper -c -a wlan0<\n>sudo tc qdisc del dev wlan0 root<\n>sudo tc qdisc del dev wlan0 ingress<\n>sudo tc qdisc del dev ifb0 root<\n>sudo ip link set ifb0 down<\n>sudo ip link delete ifb0
sudo modprobe ifb numifbs=1
lsmod | grep ifb
vim bb_fix.sh
chmod +x bb_fix.sh
sudo ./bb_fix.sh up
tc qdisc show dev wlan0
tc qdisc show dev ifb0
ping -c 50 8.8.8.8
sudo ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
sudo
sudo ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
ls .emacs.d/etc/themes/
sudo ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
killall discord
sudo ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
exit
sudo ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
exit
sudo ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
1
sudo ./bb_fix.sh up
sudo ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
ping -c 50 8.8.8.8
sudo ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
sudo ./bb_fix.sh down
sudo ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
sudo ./bb_fix.sh down
sudo ./bb_fix.sh up
sudo ./bb_fix.sh down
sudo ./bb_fix.sh up
sudo ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
ls .agda
cd .agda
clear
ls
ls agda-stdlib/
ls .agda
cl
ls | to json
ls --all | to json 
ls **/* | to json
ls **/* --all | to json
clear
cd .git/
clear
ls **/* --all | to json
clear
ls **/* --all | enumerate | to json
ls **/* --all | enumerate | sort-by date | to json
ls **/* --all | enumerate | to json
ls **/* --all | enumerate | sort-by size | to json
ls **/* --all | sort-by size | enumerate | to json --indent 2
clear
ls **/* --all | sort-by size | enumerate
clear
ls **/* --all | sort-by size | enumerate | to md 
cl
# 1. Lista recursivamente todos os arquivos<\n>ls **/* --all --full | <\n># 2. Divide a coluna 'path' em suas partes. 'dir' é o diretório pai.<\n>path split | <\n># 3. Agrupa as linhas (arquivos) pelo diretório pai ('dir')<\n>group-by dir | <\n># 4. Transforma o resultado (tabela) em uma estrutura chave-valor (record)<\n>#    A chave é o nome do diretório, o valor é a lista de arquivos<\n>into record |<\n># 5. Converte a estrutura final para JSON<\n>to json --indent 2
# 1. Lista recursivamente todos os arquivos<\n>ls **/* --all | <\n># 2. Divide a coluna 'path' em suas partes. 'dir' é o diretório pai.<\n>path split | <\n># 3. Agrupa as linhas (arquivos) pelo diretório pai ('dir')<\n>group-by dir | <\n># 4. Transforma o resultado (tabela) em uma estrutura chave-valor (record)<\n>#    A chave é o nome do diretório, o valor é a lista de arquivos<\n>into record |<\n># 5. Converte a estrutura final para JSON<\n>to json --indent 2
cl
ls **/* --all | each {|row| $row | merge ({ path split $row.name }) } | group-by dir | into record | to json --indent 2
path split --help
ls **/* --all | each {|row| $row | merge ({ path split }) } | group-by dir | into record | to json --indent 2
ls **/* --all | each {|row| $row | merge ({ path split }) } | group-by dir | into record | to json
clear
ls **/* --all | each {|row| $row | merge ({ path split $row.name }) } | group-by dir | into record | to json --indent 2
ls **/* --all | each {|row| $row | merge ({ path split }) } | group-by dir | into record | to json --indent 2
clear
ls **/* --all | <\n>where type == file | <\n>each {|row| $row | <\n>    merge ({<\n>        $row.name | path split | select dir<\n>    }) <\n>} | <\n>group-by dir | <\n>into record | <\n>to json --indent 2
ls **/* --all | sort-by size | enumerate | to json --indent 2
clear
ls **/* --all <\n>| where type == "file"<\n>| insert parent { |row| $row.name | path dirname }<\n>| group-by parent<\n>| transpose directory files<\n>| update files { |row| $row.files | select name size }<\n>| to json --indent 2
cd ..
touch k/
mkdir show
cd show
mkdir a/
cd a/
touch a.md b.md c.md
cd ..
ls
mkdir b/
ls
cd b
touch a.md b.md c.md
cd ..
ls **/* --all <\n>| where type == "file"<\n>| insert parent { |row| $row.name | path dirname }<\n>| group-by parent<\n>| transpose directory files<\n>| update files { |row| $row.files | select name size }<\n>| to json --indent 2
clear
ls **/* --all <\n>| where type == "file"<\n>| group-by { |row| $row.name | path dirname }<\n>| to json --indent 2
clear
ls **/* --all <\n>| where type == "file"<\n>| group-by { |row| $row.name | path dirname }<\n>| items { |dir, files| <\n>    {<\n>      key: $dir,<\n>      value: (if ($files | length) == 1 { <\n>        $files.0.name | path basename <\n>      } else { <\n>        $files | each { |f| $f.name | path basename }<\n>      })<\n>    }<\n>  }<\n>| transpose -r -d<\n>| to json --indent 2
clear
ls **/* --all <\n>| where type == "file"<\n>| group-by { |row| $row.name | path dirname }<\n>| items { |dir, files| <\n>    { $dir: ($files | each { |f| $f.name | path basename }) }<\n>  }<\n>| reduce { |it, acc| $acc | merge $it }<\n>| to json --indent 2
clear
http get "https://api.github.com/repos/PHAredes/dotfiles/git/trees/main?recursive=1"<\n>| get tree<\n>| where type == "blob"<\n>| where path =~ "^dotfiles/"<\n>| group-by { |row| $row.path | path dirname }<\n>| items { |dir, files| { $dir: ($files | each { |f| $f.path | path basename }) } }<\n>| reduce { |it, acc| $acc | merge $it }<\n>| to json --indent 2
clear
ls **/* --all <\n>| where type == "file"<\n>| group-by { |row| $row.name | path dirname }<\n>| items { |dir, files| <\n>    { $dir: ($files | each { |f| $f.name | path basename }) }<\n>  }<\n>| reduce { |it, acc| $acc | merge $it }<\n>| to json --indent 2
http get "https://api.github.com/repos/PHAredes/dotfiles/git/trees/main?recursive=1"<\n>| get tree<\n>| where type == "blob"<\n>| where path =~ "^dotfiles/"<\n>| group-by { |row| $row.path | path dirname }<\n>| items { |dir, files| { $dir: ($files | each { |f| $f.path | path basename }) } }<\n>| reduce { |it, acc| $acc | merge $it }<\n>| to json --indent 2
clear
ls **/* --all <\n>| where type == "file"<\n>| group-by { |row| $row.name | path dirname }<\n>| items { |dir, files| <\n>    { $dir: ($files | each { |f| $f.name | path basename }) }<\n>  }<\n>| reduce { |it, acc| $acc | merge $it }<\n>| to json --indent 2
cd ..
cd .git
ls **/* --all <\n>| where type == "file"<\n>| group-by { |row| $row.name | path dirname }<\n>| items { |dir, files| <\n>    { $dir: ($files | each { |f| $f.name | path basename }) }<\n>  }<\n>| reduce { |it, acc| $acc | merge $it }<\n>| to json --indent 2
clear
ls **/* --all <\n>| where type == "file"<\n>| group-by { |row| $row.name | path dirname }<\n>| items { |dir, files| <\n>    { $dir: ($files | each { |f| $f.name | path basename }) }<\n>  }<\n>| reduce { |it, acc| $acc | merge $it }<\n>| to json --indent 2
clear
http get "https://api.github.com/repos/PHAredes/dotfiles/git/trees/main?recursive=1"<\n>| get tree<\n>| where type == "blob"<\n>| where path =~ "^dotfiles/"<\n>| group-by { |row| $row.path | path dirname }<\n>| items { |dir, files| { $dir: ($files | each { |f| $f.path | path basename }) } }<\n>| reduce { |it, acc| $acc | merge $it }<\n>| to json --indent 2
sudo ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
clear
mise use node
where npm
which npm
mise use npm
where node
which node
exit
'<\n>let mise_path = $nu.default-config-dir | path join mise.nu<\n>^mise activate nu | save $mise_path --force<\n>' | save $nu.env-path --append<\n>"\nuse ($nu.default-config-dir | path join mise.nu)" | save $nu.config-path --append
where mise
exit
where mise
where node
where mise
exit
sudo ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
ls
ls **/* --all <\n>| where type == "file"<\n>| group-by { |row| $row.name | path dirname }<\n>| items { |dir, files| <\n>    { $dir: ($files | each { |f| $f.name | path basename }) }<\n>  }<\n>| reduce { |it, acc| $acc | merge $it }<\n>| to json --indent 2
clear
ls **/* --all
clear
ls
rm node_modules/
rm -rf node_modules/
;s
ls
clear
ls --all
ls **/* --all
clear
rm -rf .next/
ls
ls **/* --all
rm -rf .git/
clear
ls
ls **/* --all
ls **/* --all <\n>| where type == "file"<\n>| group-by { |row| $row.name | path dirname }<\n>| items { |dir, files| <\n>    { $dir: ($files | each { |f| $f.name | path basename }) }<\n>  }<\n>| reduce { |it, acc| $acc | merge $it }<\n>| to json --indent 2
ls **/* --all <\n>| where type == "file"<\n>| group-by { |row| $row.name | path dirname }<\n>| items , files| <\n>    { $dir: ($files | each { |f| $f.name | path basename }) }<\n>  }<\n>| reduce { |it, acc| $acc | merge $it }<\n>| to json --indent 2
ls **/* --all
ls **/* --all | to text 
ls **/* --all | to md 
ls **/* --all | to toml 
ls **/* --all | to csv 
ls **/* --all
clear
exit
sudo ryzenadj --stapm-limit=25000 --fast-limit=25000 --slow-limit=25000 --tctl-temp=90
ls **/* --all | to json 
ls **/* --all
clear
ls
clear
ls | where name not in [<\n>    'dist'<\n>    'node_modules'<\n>    'out'<\n>    'neutralinojs.log'<\n>    'tsconfig.tsbuildinfo'<\n>    'template.zip'<\n>] | select name type size modified | to json
ls | where name != node_modules
git ls-files<\n>| lines<\n>| group-by { |file| $file | path dirname }<\n>| items {|dir, files| <\n>    { $dir: ($files | each { |f| $f | path basename }) }<\n>  }<\n>| reduce { |it, acc| $acc | merge $it }<\n>| to json --indent 2
clear
git ls-files<\n>| lines<\n>| group-by { |file| $file | path dirname }<\n>| items {|dir, files| <\n>    { $dir: ($files | each { |f| $f | path basename }) }<\n>  }<\n>| reduce { |it, acc| $acc | merge $it }<\n>| to json --indent 2
ls **/* --all | where size > 20000
ls **/* --all | where size > 20000kb
exit
ls **/* --all | where size > 20000kb
exit
ls
clear
exit
