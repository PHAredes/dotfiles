;;; igist-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:



;;; Generated autoloads from igist.el

(autoload 'igist-post-files "igist" "\
Post FILES to Gist with an optional PUBLIC visibility and description.

The argument FILES is a list of files that the user wants to post on Gist. If
there are marked files in the Dired buffer, use them; otherwise, read the
directory in the minibuffer with completions and then read multiple files.

The argument PUBLIC is an optional boolean value that determines whether the
posted Gist should be PUBLIC or not.

The Gist will be created without editing.

(fn FILES &optional PUBLIC)" t)
(autoload 'igist-comments-list-mode "igist" "\
Minor mode for viewing and rendering gists comments.

This minor mode is turned on after command `igist-load-comments'.

\\<igist-comments-list-mode-map>
\\{igist-comments-list-mode-map}.

This is a minor mode.  If called interactively, toggle the
`Igist-Comments-List mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `igist-comments-list-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'igist-ivy-read-user-gists "igist" "\
Read and display gists for a specific USER.

Argument USER is the username of the user whose gists will be displayed.

(fn USER)" t)
(autoload 'igist-ivy-read-public-gists "igist" "\
Explore public gists in the minibuffer, using Ivy completions." t)
(autoload 'igist-edit-list "igist" "\
Read the user's gists in the minibuffer and open them in the edit buffer." t)
(autoload 'igist-clone-gist "igist" "\
Clone a GitHub gist to a specified DIRECTORY using a chosen PROTOCOL.

Argument GIST-ID is a string that represents the ID of the gist to be cloned.

Argument DIRECTORY is a string that represents the DIRECTORY where the gist will
be cloned.

Optional argument PROTOCOL is a string prefix that represents the PROTOCOL
to be used for cloning the gist.
It can be either \"git@\" or \"https://\".
If not provided, the default PROTOCOL is \"git@\".

(fn GIST-ID DIRECTORY &optional PROTOCOL)" t)
(autoload 'igist-explore-public-gists "igist" "\
List up to 3000 public gists, sorted by the most recent.

If BACKGROUND is non-nil, the user's buffer should not be displayed.

Loading of subsequent pages may be halted by the command
`igist-list-cancel-load'.

See also `igist-explore-mode'.

(fn &optional BACKGROUND)" t)
(autoload 'igist-list-starred "igist" "\
List the authenticated user's starred gists.

Loading of subsequent pages may be stopped by the command
`igist-list-cancel-load'." t)
(autoload 'igist-list-other-user-gists "igist" "\
List public gists of a specified GitHub USER.

Argument USER is a string representing the username of the other user whose
gists are to be listed.

(fn USER)" t)
(autoload 'igist-list-gists "igist" "\
List the gists of `igist-current-user-name' and activate `igist-list-mode'.

Loading of subsequent pages may be stopped by the command
`igist-list-cancel-load', executed in tabulated buffer." t)
(autoload 'igist-new-gist-from-buffer "igist" "\
Create a new gist from the current buffer." t)
(autoload 'igist-create-new-gist "igist" "\
Set up and switch to the editable gist buffer.

If Transient Mark mode is enabled and the mark is active,
insert it as initial content." t)
(autoload 'igist-change-user "igist" "\
Change the user for authentication prompting with string PROMPT.

Optional argument PROMPT is the initial value to be displayed in the prompt.

If non-nil, optional argument INITIAL-INPUT is a string to insert before
reading.

The third arg HISTORY, if non-nil, specifies a history list and optionally the
initial position in the list.

(fn &optional PROMPT INITIAL-INPUT HISTORY)" t)
 (autoload 'igist-table-menu "igist" nil t)
(autoload 'igist-comments-edit-mode "igist" "\
Minor mode for editing and creating gists comments.

This minor mode is turned on after commands `igist-add-comment'
and `igist-edit-comment'.

\\<igist-comments-edit-mode-map>
\\{igist-comments-edit-mode-map}.

This is a minor mode.  If called interactively, toggle the
`Igist-Comments-Edit mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `igist-comments-edit-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'igist-edit-mode "igist" "\
Minor mode for language major mode buffers generated by `igist'.

This minor mode is turned on after command `igist-edit-gist'.

\\<igist-edit-mode-map>
\\{igist-edit-mode-map}

See also `igist-before-save-hook'.

This is a minor mode.  If called interactively, toggle the `Igist-Edit
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `igist-edit-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
 (autoload 'igist-dispatch "igist" nil t)
(register-definition-prefixes "igist" '("igist-"))

;;; End of scraped data

(provide 'igist-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; igist-autoloads.el ends here
